// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace MySvr {
namespace Base {
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class FastRespResponse;
class FastRespResponseDefaultTypeInternal;
extern FastRespResponseDefaultTypeInternal _FastRespResponse_default_instance_;
class OneWayResponse;
class OneWayResponseDefaultTypeInternal;
extern OneWayResponseDefaultTypeInternal _OneWayResponse_default_instance_;
class TraceStack;
class TraceStackDefaultTypeInternal;
extern TraceStackDefaultTypeInternal _TraceStack_default_instance_;
}  // namespace Base
}  // namespace MySvr
PROTOBUF_NAMESPACE_OPEN
template<> ::MySvr::Base::Context* Arena::CreateMaybeMessage<::MySvr::Base::Context>(Arena*);
template<> ::MySvr::Base::FastRespResponse* Arena::CreateMaybeMessage<::MySvr::Base::FastRespResponse>(Arena*);
template<> ::MySvr::Base::OneWayResponse* Arena::CreateMaybeMessage<::MySvr::Base::OneWayResponse>(Arena*);
template<> ::MySvr::Base::TraceStack* Arena::CreateMaybeMessage<::MySvr::Base::TraceStack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MySvr {
namespace Base {

// ===================================================================

class TraceStack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.TraceStack) */ {
 public:
  inline TraceStack() : TraceStack(nullptr) {};
  virtual ~TraceStack();

  TraceStack(const TraceStack& from);
  TraceStack(TraceStack&& from) noexcept
    : TraceStack() {
    *this = ::std::move(from);
  }

  inline TraceStack& operator=(const TraceStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceStack& operator=(TraceStack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceStack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceStack* internal_default_instance() {
    return reinterpret_cast<const TraceStack*>(
               &_TraceStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceStack& a, TraceStack& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceStack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceStack* New() const final {
    return CreateMaybeMessage<TraceStack>(nullptr);
  }

  TraceStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceStack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceStack& from);
  void MergeFrom(const TraceStack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceStack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Base.TraceStack";
  }
  protected:
  explicit TraceStack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kRpcNameFieldNumber = 4,
    kMessageFieldNumber = 6,
    kParentIdFieldNumber = 1,
    kCurrentIdFieldNumber = 2,
    kStatusCodeFieldNumber = 5,
    kIsBatchFieldNumber = 8,
    kSpendUsFieldNumber = 7,
  };
  // string service_name = 3;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string rpc_name = 4;
  void clear_rpc_name();
  const std::string& rpc_name() const;
  void set_rpc_name(const std::string& value);
  void set_rpc_name(std::string&& value);
  void set_rpc_name(const char* value);
  void set_rpc_name(const char* value, size_t size);
  std::string* mutable_rpc_name();
  std::string* release_rpc_name();
  void set_allocated_rpc_name(std::string* rpc_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rpc_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rpc_name(
      std::string* rpc_name);
  private:
  const std::string& _internal_rpc_name() const;
  void _internal_set_rpc_name(const std::string& value);
  std::string* _internal_mutable_rpc_name();
  public:

  // string message = 6;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 parent_id = 1;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_id() const;
  void _internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_id = 2;
  void clear_current_id();
  ::PROTOBUF_NAMESPACE_ID::int32 current_id() const;
  void set_current_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_id() const;
  void _internal_set_current_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status_code = 5;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_batch = 8;
  void clear_is_batch();
  bool is_batch() const;
  void set_is_batch(bool value);
  private:
  bool _internal_is_batch() const;
  void _internal_set_is_batch(bool value);
  public:

  // int64 spend_us = 7;
  void clear_spend_us();
  ::PROTOBUF_NAMESPACE_ID::int64 spend_us() const;
  void set_spend_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_spend_us() const;
  void _internal_set_spend_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Base.TraceStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpc_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  bool is_batch_;
  ::PROTOBUF_NAMESPACE_ID::int64 spend_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Context PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.Context) */ {
 public:
  inline Context() : Context(nullptr) {};
  virtual ~Context();

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }
  inline void Swap(Context* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return CreateMaybeMessage<Context>(nullptr);
  }

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Base.Context";
  }
  protected:
  explicit Context(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceStackFieldNumber = 8,
    kLogIdFieldNumber = 1,
    kServiceNameFieldNumber = 2,
    kRpcNameFieldNumber = 3,
    kStatusCodeFieldNumber = 4,
    kCurrentStackIdFieldNumber = 5,
    kParentStackIdFieldNumber = 6,
    kStackAllocIdFieldNumber = 7,
  };
  // repeated .MySvr.Base.TraceStack trace_stack = 8;
  int trace_stack_size() const;
  private:
  int _internal_trace_stack_size() const;
  public:
  void clear_trace_stack();
  ::MySvr::Base::TraceStack* mutable_trace_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySvr::Base::TraceStack >*
      mutable_trace_stack();
  private:
  const ::MySvr::Base::TraceStack& _internal_trace_stack(int index) const;
  ::MySvr::Base::TraceStack* _internal_add_trace_stack();
  public:
  const ::MySvr::Base::TraceStack& trace_stack(int index) const;
  ::MySvr::Base::TraceStack* add_trace_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySvr::Base::TraceStack >&
      trace_stack() const;

  // string log_id = 1;
  void clear_log_id();
  const std::string& log_id() const;
  void set_log_id(const std::string& value);
  void set_log_id(std::string&& value);
  void set_log_id(const char* value);
  void set_log_id(const char* value, size_t size);
  std::string* mutable_log_id();
  std::string* release_log_id();
  void set_allocated_log_id(std::string* log_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log_id(
      std::string* log_id);
  private:
  const std::string& _internal_log_id() const;
  void _internal_set_log_id(const std::string& value);
  std::string* _internal_mutable_log_id();
  public:

  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string rpc_name = 3;
  void clear_rpc_name();
  const std::string& rpc_name() const;
  void set_rpc_name(const std::string& value);
  void set_rpc_name(std::string&& value);
  void set_rpc_name(const char* value);
  void set_rpc_name(const char* value, size_t size);
  std::string* mutable_rpc_name();
  std::string* release_rpc_name();
  void set_allocated_rpc_name(std::string* rpc_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rpc_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rpc_name(
      std::string* rpc_name);
  private:
  const std::string& _internal_rpc_name() const;
  void _internal_set_rpc_name(const std::string& value);
  std::string* _internal_mutable_rpc_name();
  public:

  // int32 status_code = 4;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_stack_id = 5;
  void clear_current_stack_id();
  ::PROTOBUF_NAMESPACE_ID::int32 current_stack_id() const;
  void set_current_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_stack_id() const;
  void _internal_set_current_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parent_stack_id = 6;
  void clear_parent_stack_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_stack_id() const;
  void set_parent_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_stack_id() const;
  void _internal_set_parent_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stack_alloc_id = 7;
  void clear_stack_alloc_id();
  ::PROTOBUF_NAMESPACE_ID::int32 stack_alloc_id() const;
  void set_stack_alloc_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stack_alloc_id() const;
  void _internal_set_stack_alloc_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Base.Context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySvr::Base::TraceStack > trace_stack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpc_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_stack_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_stack_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 stack_alloc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class OneWayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.OneWayResponse) */ {
 public:
  inline OneWayResponse() : OneWayResponse(nullptr) {};
  virtual ~OneWayResponse();

  OneWayResponse(const OneWayResponse& from);
  OneWayResponse(OneWayResponse&& from) noexcept
    : OneWayResponse() {
    *this = ::std::move(from);
  }

  inline OneWayResponse& operator=(const OneWayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneWayResponse& operator=(OneWayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneWayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneWayResponse* internal_default_instance() {
    return reinterpret_cast<const OneWayResponse*>(
               &_OneWayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneWayResponse& a, OneWayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OneWayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneWayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneWayResponse* New() const final {
    return CreateMaybeMessage<OneWayResponse>(nullptr);
  }

  OneWayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneWayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneWayResponse& from);
  void MergeFrom(const OneWayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneWayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Base.OneWayResponse";
  }
  protected:
  explicit OneWayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MySvr.Base.OneWayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class FastRespResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Base.FastRespResponse) */ {
 public:
  inline FastRespResponse() : FastRespResponse(nullptr) {};
  virtual ~FastRespResponse();

  FastRespResponse(const FastRespResponse& from);
  FastRespResponse(FastRespResponse&& from) noexcept
    : FastRespResponse() {
    *this = ::std::move(from);
  }

  inline FastRespResponse& operator=(const FastRespResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastRespResponse& operator=(FastRespResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastRespResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastRespResponse* internal_default_instance() {
    return reinterpret_cast<const FastRespResponse*>(
               &_FastRespResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FastRespResponse& a, FastRespResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FastRespResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastRespResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastRespResponse* New() const final {
    return CreateMaybeMessage<FastRespResponse>(nullptr);
  }

  FastRespResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastRespResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastRespResponse& from);
  void MergeFrom(const FastRespResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastRespResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Base.FastRespResponse";
  }
  protected:
  explicit FastRespResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MySvr.Base.FastRespResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================

static const int kPortFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  Port;
static const int kMethodModeFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  MethodMode;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceStack

// int32 parent_id = 1;
inline void TraceStack::clear_parent_id() {
  parent_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceStack::_internal_parent_id() const {
  return parent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceStack::parent_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.parent_id)
  return _internal_parent_id();
}
inline void TraceStack::_internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_id_ = value;
}
inline void TraceStack::set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.parent_id)
}

// int32 current_id = 2;
inline void TraceStack::clear_current_id() {
  current_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceStack::_internal_current_id() const {
  return current_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceStack::current_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.current_id)
  return _internal_current_id();
}
inline void TraceStack::_internal_set_current_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_id_ = value;
}
inline void TraceStack::set_current_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.current_id)
}

// string service_name = 3;
inline void TraceStack::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TraceStack::service_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.service_name)
  return _internal_service_name();
}
inline void TraceStack::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.service_name)
}
inline std::string* TraceStack::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.TraceStack.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& TraceStack::_internal_service_name() const {
  return service_name_.Get();
}
inline void TraceStack::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TraceStack::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.TraceStack.service_name)
}
inline void TraceStack::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Base.TraceStack.service_name)
}
inline void TraceStack::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.TraceStack.service_name)
}
inline std::string* TraceStack::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TraceStack::release_service_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.TraceStack.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceStack::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.TraceStack.service_name)
}
inline std::string* TraceStack::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Base.TraceStack.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TraceStack::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Base.TraceStack.service_name)
}

// string rpc_name = 4;
inline void TraceStack::clear_rpc_name() {
  rpc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TraceStack::rpc_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.rpc_name)
  return _internal_rpc_name();
}
inline void TraceStack::set_rpc_name(const std::string& value) {
  _internal_set_rpc_name(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.rpc_name)
}
inline std::string* TraceStack::mutable_rpc_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.TraceStack.rpc_name)
  return _internal_mutable_rpc_name();
}
inline const std::string& TraceStack::_internal_rpc_name() const {
  return rpc_name_.Get();
}
inline void TraceStack::_internal_set_rpc_name(const std::string& value) {
  
  rpc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TraceStack::set_rpc_name(std::string&& value) {
  
  rpc_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.TraceStack.rpc_name)
}
inline void TraceStack::set_rpc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Base.TraceStack.rpc_name)
}
inline void TraceStack::set_rpc_name(const char* value,
    size_t size) {
  
  rpc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.TraceStack.rpc_name)
}
inline std::string* TraceStack::_internal_mutable_rpc_name() {
  
  return rpc_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TraceStack::release_rpc_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.TraceStack.rpc_name)
  return rpc_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceStack::set_allocated_rpc_name(std::string* rpc_name) {
  if (rpc_name != nullptr) {
    
  } else {
    
  }
  rpc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.TraceStack.rpc_name)
}
inline std::string* TraceStack::unsafe_arena_release_rpc_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Base.TraceStack.rpc_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rpc_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TraceStack::unsafe_arena_set_allocated_rpc_name(
    std::string* rpc_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rpc_name != nullptr) {
    
  } else {
    
  }
  rpc_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rpc_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Base.TraceStack.rpc_name)
}

// int32 status_code = 5;
inline void TraceStack::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceStack::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceStack::status_code() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.status_code)
  return _internal_status_code();
}
inline void TraceStack::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void TraceStack::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.status_code)
}

// string message = 6;
inline void TraceStack::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TraceStack::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.message)
  return _internal_message();
}
inline void TraceStack::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.message)
}
inline std::string* TraceStack::mutable_message() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.TraceStack.message)
  return _internal_mutable_message();
}
inline const std::string& TraceStack::_internal_message() const {
  return message_.Get();
}
inline void TraceStack::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TraceStack::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.TraceStack.message)
}
inline void TraceStack::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Base.TraceStack.message)
}
inline void TraceStack::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.TraceStack.message)
}
inline std::string* TraceStack::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TraceStack::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Base.TraceStack.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceStack::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.TraceStack.message)
}
inline std::string* TraceStack::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Base.TraceStack.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TraceStack::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Base.TraceStack.message)
}

// int64 spend_us = 7;
inline void TraceStack::clear_spend_us() {
  spend_us_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceStack::_internal_spend_us() const {
  return spend_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceStack::spend_us() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.spend_us)
  return _internal_spend_us();
}
inline void TraceStack::_internal_set_spend_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  spend_us_ = value;
}
inline void TraceStack::set_spend_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_spend_us(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.spend_us)
}

// bool is_batch = 8;
inline void TraceStack::clear_is_batch() {
  is_batch_ = false;
}
inline bool TraceStack::_internal_is_batch() const {
  return is_batch_;
}
inline bool TraceStack::is_batch() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.TraceStack.is_batch)
  return _internal_is_batch();
}
inline void TraceStack::_internal_set_is_batch(bool value) {
  
  is_batch_ = value;
}
inline void TraceStack::set_is_batch(bool value) {
  _internal_set_is_batch(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.TraceStack.is_batch)
}

// -------------------------------------------------------------------

// Context

// string log_id = 1;
inline void Context::clear_log_id() {
  log_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Context::log_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.log_id)
  return _internal_log_id();
}
inline void Context::set_log_id(const std::string& value) {
  _internal_set_log_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.log_id)
}
inline std::string* Context::mutable_log_id() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.log_id)
  return _internal_mutable_log_id();
}
inline const std::string& Context::_internal_log_id() const {
  return log_id_.Get();
}
inline void Context::_internal_set_log_id(const std::string& value) {
  
  log_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Context::set_log_id(std::string&& value) {
  
  log_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.Context.log_id)
}
inline void Context::set_log_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Base.Context.log_id)
}
inline void Context::set_log_id(const char* value,
    size_t size) {
  
  log_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.Context.log_id)
}
inline std::string* Context::_internal_mutable_log_id() {
  
  return log_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Context::release_log_id() {
  // @@protoc_insertion_point(field_release:MySvr.Base.Context.log_id)
  return log_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Context::set_allocated_log_id(std::string* log_id) {
  if (log_id != nullptr) {
    
  } else {
    
  }
  log_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.Context.log_id)
}
inline std::string* Context::unsafe_arena_release_log_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Base.Context.log_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return log_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Context::unsafe_arena_set_allocated_log_id(
    std::string* log_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (log_id != nullptr) {
    
  } else {
    
  }
  log_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Base.Context.log_id)
}

// string service_name = 2;
inline void Context::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Context::service_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.service_name)
  return _internal_service_name();
}
inline void Context::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.service_name)
}
inline std::string* Context::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& Context::_internal_service_name() const {
  return service_name_.Get();
}
inline void Context::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Context::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.Context.service_name)
}
inline void Context::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Base.Context.service_name)
}
inline void Context::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.Context.service_name)
}
inline std::string* Context::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Context::release_service_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.Context.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Context::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.Context.service_name)
}
inline std::string* Context::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Base.Context.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Context::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Base.Context.service_name)
}

// string rpc_name = 3;
inline void Context::clear_rpc_name() {
  rpc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Context::rpc_name() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.rpc_name)
  return _internal_rpc_name();
}
inline void Context::set_rpc_name(const std::string& value) {
  _internal_set_rpc_name(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.rpc_name)
}
inline std::string* Context::mutable_rpc_name() {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.rpc_name)
  return _internal_mutable_rpc_name();
}
inline const std::string& Context::_internal_rpc_name() const {
  return rpc_name_.Get();
}
inline void Context::_internal_set_rpc_name(const std::string& value) {
  
  rpc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Context::set_rpc_name(std::string&& value) {
  
  rpc_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Base.Context.rpc_name)
}
inline void Context::set_rpc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Base.Context.rpc_name)
}
inline void Context::set_rpc_name(const char* value,
    size_t size) {
  
  rpc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Base.Context.rpc_name)
}
inline std::string* Context::_internal_mutable_rpc_name() {
  
  return rpc_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Context::release_rpc_name() {
  // @@protoc_insertion_point(field_release:MySvr.Base.Context.rpc_name)
  return rpc_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Context::set_allocated_rpc_name(std::string* rpc_name) {
  if (rpc_name != nullptr) {
    
  } else {
    
  }
  rpc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Base.Context.rpc_name)
}
inline std::string* Context::unsafe_arena_release_rpc_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Base.Context.rpc_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rpc_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Context::unsafe_arena_set_allocated_rpc_name(
    std::string* rpc_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rpc_name != nullptr) {
    
  } else {
    
  }
  rpc_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rpc_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Base.Context.rpc_name)
}

// int32 status_code = 4;
inline void Context::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::status_code() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.status_code)
  return _internal_status_code();
}
inline void Context::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void Context::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.status_code)
}

// int32 current_stack_id = 5;
inline void Context::clear_current_stack_id() {
  current_stack_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::_internal_current_stack_id() const {
  return current_stack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::current_stack_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.current_stack_id)
  return _internal_current_stack_id();
}
inline void Context::_internal_set_current_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_stack_id_ = value;
}
inline void Context::set_current_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_stack_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.current_stack_id)
}

// int32 parent_stack_id = 6;
inline void Context::clear_parent_stack_id() {
  parent_stack_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::_internal_parent_stack_id() const {
  return parent_stack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::parent_stack_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.parent_stack_id)
  return _internal_parent_stack_id();
}
inline void Context::_internal_set_parent_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_stack_id_ = value;
}
inline void Context::set_parent_stack_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_stack_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.parent_stack_id)
}

// int32 stack_alloc_id = 7;
inline void Context::clear_stack_alloc_id() {
  stack_alloc_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::_internal_stack_alloc_id() const {
  return stack_alloc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::stack_alloc_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.stack_alloc_id)
  return _internal_stack_alloc_id();
}
inline void Context::_internal_set_stack_alloc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stack_alloc_id_ = value;
}
inline void Context::set_stack_alloc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stack_alloc_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Base.Context.stack_alloc_id)
}

// repeated .MySvr.Base.TraceStack trace_stack = 8;
inline int Context::_internal_trace_stack_size() const {
  return trace_stack_.size();
}
inline int Context::trace_stack_size() const {
  return _internal_trace_stack_size();
}
inline void Context::clear_trace_stack() {
  trace_stack_.Clear();
}
inline ::MySvr::Base::TraceStack* Context::mutable_trace_stack(int index) {
  // @@protoc_insertion_point(field_mutable:MySvr.Base.Context.trace_stack)
  return trace_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySvr::Base::TraceStack >*
Context::mutable_trace_stack() {
  // @@protoc_insertion_point(field_mutable_list:MySvr.Base.Context.trace_stack)
  return &trace_stack_;
}
inline const ::MySvr::Base::TraceStack& Context::_internal_trace_stack(int index) const {
  return trace_stack_.Get(index);
}
inline const ::MySvr::Base::TraceStack& Context::trace_stack(int index) const {
  // @@protoc_insertion_point(field_get:MySvr.Base.Context.trace_stack)
  return _internal_trace_stack(index);
}
inline ::MySvr::Base::TraceStack* Context::_internal_add_trace_stack() {
  return trace_stack_.Add();
}
inline ::MySvr::Base::TraceStack* Context::add_trace_stack() {
  // @@protoc_insertion_point(field_add:MySvr.Base.Context.trace_stack)
  return _internal_add_trace_stack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MySvr::Base::TraceStack >&
Context::trace_stack() const {
  // @@protoc_insertion_point(field_list:MySvr.Base.Context.trace_stack)
  return trace_stack_;
}

// -------------------------------------------------------------------

// OneWayResponse

// -------------------------------------------------------------------

// FastRespResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Base
}  // namespace MySvr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
